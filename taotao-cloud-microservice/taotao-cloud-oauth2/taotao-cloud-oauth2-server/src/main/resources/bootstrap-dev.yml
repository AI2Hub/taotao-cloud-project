server:
  port: 6628

seata:
  enabled: true
  service:
    grouplist:
      default: ${TAOTAO_CLOUD_SEATA_HOST}:${TAOTAO_CLOUD_SEATA_PORT}
    vgroup-mapping:
      my_test_tx_group: default
  application-id: taotao-cloud-oauth2-service
  tx-service-group: my_test_tx_group
  enable-auto-data-source-proxy: true
  config:
    type: nacos
    nacos:
      namespace: bbeb253d-aaa8-4a75-9d0b-27931232439f
      server-addr: ${TAOTAO_CLOUD_SEATA_CONFIG_NACOS_HOST}:${TAOTAO_CLOUD_SEATA_CONFIG_NACOS_PORT}
      group: SEATA_GROUP
      username: ${TAOTAO_CLOUD_SEATA_CONFIG_NACOS_USERNAME}
      password: ${TAOTAO_CLOUD_SEATA_CONFIG_NACOS_PASSWORD}
  registry:
    type: nacos
    nacos:
      application: seata-server
      server-addr: ${TAOTAO_CLOUD_SEATA_REGISTRY_NACOS_HOST}:${TAOTAO_CLOUD_SEATA_REGISTRY_NACOS_PORT}
      group: SEATA_GROUP
      namespace: bbeb253d-aaa8-4a75-9d0b-27931232439f
      username: ${TAOTAO_CLOUD_SEATA_REGISTRY_NACOS_USERNAME}
      password: ${TAOTAO_CLOUD_SEATA_REGISTRY_NACOS_PASSWORD}
      cluster: default

spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: taotao-cloud-oauth2-service
  mvc:
    servlet:
      load-on-startup: 1
  #  thymeleaf:
  #    prefix: classpath:/views/
  #    suffix: .html
  #    cache: false
  cache:
    type: none
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:p6spy:mysql://${TAOTAO_CLOUD_MYSQL_HOST}:${TAOTAO_CLOUD_MYSQL_PORT}/taotao-cloud-uc-service?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: ${TAOTAO_CLOUD_MYSQL_USERNAME}
    password: ${TAOTAO_CLOUD_MYSQL_PASSWORD}
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    hikari:
      auto-commit: true
      connection-timeout: 30000
      idle-timeout: 25000
      login-timeout: 5
      validation-timeout: 3000
      max-lifetime: 50000
      read-only: false
      connection-test-query: SELECT 1
      maximum-pool-size: 15
      minimum-idle: 10
      pool-name: DatebookHikariCP
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
  jpa:
    database: mysql
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  redis:
    host: ${TAOTAO_CLOUD_REDIS_HOST}
    port: ${TAOTAO_CLOUD_REDIS_PORT}
    database: 1
    #password: ${TAOTAO-CLOUD-REDIS-PASSWORD:123456}
    lettuce:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
    nacos:
      discovery:
        server-addr: ${TAOTAO_CLOUD_NACOS_DISCOVERY_HOST}:${TAOTAO_CLOUD_NACOS_DISCOVERY_PORT}
        metadata:
          version: 5
      config:
        enabled: false
        server-addr: ${TAOTAO_CLOUD_NACOS_CONFIG_HOST}:${TAOTAO_CLOUD_NACOS_CONFIG_PORT}
        namespace: 2c421c7d-7c62-422e-a4f3-996a2d301c67
        file-extension: yml
    sentinel:
      enabled: false
      eager: true
      datasource:
        ds1:
          nacos:
            server-addr: ${TAOTAO_CLOUD_SENTINEL_DATASOURCE_DS1_NACOS_HOST}:${TAOTAO_CLOUD_SENTINEL_DATASOURCE_DS1_NACOS_PORT}
            dataId: taotao-cloud-uc-sentinel
            groupId: DEFAULT_GROUP
            data-type: json
            rule-type: flow
      transport:
        dashboard: ${TAOTAO_CLOUD_SENTINEL_TRANSPORT_DASHBOARD_HOST}:${TAOTAO_CLOUD_SENTINEL_TRANSPORT_DASHBOARD_PORT}
        port: ${TAOTAO_CLOUD_SENTINEL_TRANSPORT_PORT}

  kafka:
    bootstrap-servers: ${TAOTAO-CLOUD-KAFKA-HOST}:${TAOTAO-CLOUD-KAFKA-PORT}
    producer:
      retries: 0
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
      properties:
        linger.ms: 500
    consumer:
      auto-commit-interval: 1S
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      concurrency: 5
      ack-mode: manual_immediate
      missing-topics-fatal: false
  security:
    oauth2:
      authorization:
        client:
          - client-id: mall
            client-secret: mall
            redirect-uri: https://www.baidu.com
            scope:
              - mall:read
              - mall:write
          - client-id: admin
            client-secret: admin
            redirect-uri: http://localhost:6628/login/oauth2/code/admin
      client:
        registration:
          mall:
            provider: mall
            client-id: mall
            client-secret: secret
            authorization-grant-type: authorization_code
            # 必须和auth-server中设置 一模一样!!
            redirect-uri: "http://localhost:6628/login/oauth2/code/mall"
            scope: mall.read,mall.write
          github:
            client-id: xxxx
            client-secret: xxxx
          gitee:
            client-id: 81bc2a5852cbcd35f94fa77512e1efb776b57102e1fb9b82105acf7b412f072b
            client-secret: 6cf101f97728215e3455d19bf84e4b277be505a9690cf0e9558bc24904dd6ad6
            authorization-grant-type: authorization_code
            redirect-uri: http://aa3b168ab0f3.ngrok.io/login/oauth2/code/gitee
          wechat:
            client-id: xxx
            client-secret: xxxx
            authorization-grant-type: authorization_code
            redirect-uri: https://xxx/login/oauth2/code/wx
            scope: snsapi_login
            client-authentication-method: post
          qq:
            client-id: xxx
            client-secret: xxxx
            authorization-grant-type: authorization_code
            redirect-uri: https://xxx/login/oauth2/code/qq
            scope: get_user_info
            client-authentication-method: post
        provider:
          mall:
            # 对外的授权服务中心地址
            authorization-uri: http://127.0.0.1:6628/oauth2/authorize
            token-uri: http://127.0.0.1:6628/oauth2/token
            # 写网关下的暴露地址
            user-info-uri: http://localhost:8008/upms/check_token
            user-name-attribute: name
          gitee:
            authorization-uri: https://gitee.com/oauth/authorize
            token-uri: https://gitee.com/oauth/token
            user-info-uri: https://gitee.com/api/v5/user
          wechat:
            authorization-uri: https://open.weixin.qq.com/connect/qrconnect
            token-uri: https://api.weixin.qq.com/sns/oauth2/access_token
            user-info-uri: https://api.weixin.qq.com/sns/userinfo
            user-info-authentication-method: form
          qq:
            authorization-uri: https://graph.qq.com/oauth2.0/authorize
            token-uri: https://graph.qq.com/oauth2.0/token
            user-info-uri: https://graph.qq.com/oauth2.0/me
            user-info-authentication-method: form
      resourceserver:
        #        jwt:
        #          public-key-location: classpath:key.public
        #          jws-algorithm: RS512
        #        opaquetoken:
        #          introspection-uri: http://localhost:9000/oauth/check_token
        #          client-id: abc
        #          client-secret: abc
        jwt:
          jwk-set-uri: http://127.0.0.1:6228/oauth2/jwks

feign:
  sentinel:
    enabled: true
  okhttp:
    enabled: true
  httpclient:
    enabled: false
    max-connections: 10000
    max-connections-per-route: 1000
  client:
    config:
      feign-name:
        connectTimeout: 300000
        readTimeout: 300000
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

management:
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    tags:
      application: ${spring.application.name}


logging:
  level:
    root: INFO
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
#    org.springframework.boot.autoconfigure: DEBUG

temp:
  redirect_uri: http://localhost:8008/mall/login/oauth2/code/mall
