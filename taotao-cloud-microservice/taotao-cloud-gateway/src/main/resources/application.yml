server:
  http:
    port: 9900
  port: 9443
  shutdown: graceful
  http2:
    enabled: true
  ssl:
    enabled: false
    key-store: classpath:cert/SHA256withRSA_taotaocloud.top.jks
    key-store-type: JKS
    key-store-password: 1234

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://127.0.0.1:6628/oauth2/jwks #配置RSA的公钥访问地址
  cache:
    type: none
  main:
    allow-bean-definition-overriding: true
    banner-mode: off
  application:
    name: taotao-cloud-gateway
#  boot:
#    admin:
#      client:
#        enabled: true
#        url: http://127.0.0.1:8888
#        username: admin
#        password: root123456
  sleuth:
    enabled: true
    web:
      client:
        enabled: true
    sampler:
      #采样率，默认为0.1
      probability: 1.0
  zipkin:
    enabled: true
    base-url: http://${TAOTAO_CLOUD_ZIPKIN_HOST:127.0.0.1}:${TAOTAO_CLOUD_ZIPKIN_PORT:9411}
    # 关闭服务发现，否则Spring Cloud会把zipkin的url当做服务名称
    discoveryClientEnabled: false
    #发送数据类型 kafaka、rabbitmq、web
    sender:
      type: WEB
  redis:
    client-name: taotao-cloud-gateway-redis-client
    host: ${TAOTAO_CLOUD_REDIS_HOST:127.0.0.1}
    port: ${TAOTAO_CLOUD_REDIS_PORT:6379}
    database: 0
    password: ${TAOTAO_CLOUD_REDIS_PASSWORD:taotao-cloud}
    lettuce:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0
  kafka:
    bootstrap-servers: ${TAOTAO_CLOUD_KAFKA_HOST:127.0.0.1}:${TAOTAO_CLOUD_KAFKA_PORT:9092}
    producer:
      retries: 0
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
      properties:
        linger.ms: 500
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
    nacos:
      discovery:
        server-addr: ${TAOTAO_CLOUD_NACOS_DISCOVERY_HOST:127.0.0.1}:${TAOTAO_CLOUD_NACOS_DISCOVERY_PORT:8848}
        metadata:
          version: 4
      config:
        enabled: false
        server-addr: ${TAOTAO_CLOUD_NACOS_CONFIG_HOST:127.0.0.1}:${TAOTAO_CLOUD_NACOS_CONFIG_PORT:8848}
        namespace: f402a0ea-5ce7-43cc-b19b-3fb7ded6e46e
        file-extension: yml
    sentinel:
      enabled: true
      eager: true
      transport:
        dashboard: ${TAOTAO_CLOUD_SENTINEL_TRANSPORT_DASHBOARD_HOST:127.0.0.1}:${TAOTAO_CLOUD_SENTINEL_TRANSPORT_DASHBOARD_PORT:8858}
        port: ${TAOTAO_CLOUD_SENTINEL_TRANSPORT_PORT:8717}
      scg:
        fallback:
          mode: response
          response-status: 200
          response-body: "{'data': null, 'code': 500,'message': '访问频繁,进入系统熔断'}"
    gateway:
      loadbalancer:
        use404: false
      discovery:
        locator:
          lower-case-service-id: true
          enabled: true
      routes:
        - id: taotao-cloud-uc
          uri: lb://taotao-cloud-uc
          predicates:
            - Path=/taotao-cloud-uc/**
          filters:
            - RewritePath=/taotao-cloud-uc/(?<remaining>.*), /${remaining}
        - id: openapi
          uri: http://localhost:${server.port}
          predicates:
            - Path=/v3/api-docs/**
          filters:
            - RewritePath=/v3/api-docs/(?<path>.*), /$\{path}/v3/api-docs

      default-filters:
        - AddRequestHeader=X-Request-taotao-cloud, 1.0
#  sleuth:
#    web:
#      client:
#        enabled: false
#    sampler:
#      probability: 1.0 # 将采样比例设置为 1.0，也就是全部都需要。默认是 0.1
#  zipkin:
#    enabled: false
#    sender:
#      type: kafka

taotao:
  cloud:
    gateway:
      prefix: /api
      version: /v1.0
      dynamic:
        route:
          enabled: false
          type: nacos
      log:
        trace:
          enabled: true
      security:
        ignore:
          http-urls: >
            /*/api-docs,
            /code,
            /uc/repeat/check,
            /uc/user,
            /auth/client,
            /manager/graphql,
            /manager/graphiql,
            /auth/oauth/**,
            /auth/mobile/login,
            /auth/sms/code,
            /auth/social/**,
            /auth/css/**,
            /auth/images/**,
            /auth/js/**,
            /favicon.ico,
            /manifest.json,
            /robots.txt
        auth:
          renew:
            enabled: true
    log:
      enabled: true
      types:
        - kafka

management:
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    tags:
      application: ${spring.application.name}

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true

knife4j:
  enable: false
