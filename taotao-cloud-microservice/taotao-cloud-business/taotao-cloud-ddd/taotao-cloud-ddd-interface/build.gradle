
/**
 * facade服务实现可以作为RPC提供服务，controller则作为本项目HTTP接口提供服务，供前端调用。
 * controller需要注意HTTP相关特性，敏感信息例如登陆用户ID不能依赖前端传递，
 * 登陆后前端会在请求头带一个登陆用户信息，服务端需要从请求头中获取并解析。
 */

/**
 * DDD: interfaces 用户界面层（或表示层）  最顶层
 * 负责向用户显示信息和解释用户命令
 * 请求应用层以获取用户所需要展现的数据(比如获取首页的商品数据)
 * 发送命令给应用层要求其执行某个用户命令(实现某个业务逻辑,比如用户要进行转账)
 * 用户界面层应该包含以下的内容:
 * 数据传输对象(Data Transfer Object): DTO也常被称作值对象，VO,实质上与领域层的VO并不相同
 * DTO是数据传输的载体,内部不应该存在任何业务逻辑,通过DTO把内部的领域对象与外界隔离。
 * 装配(Assembler): 实现DTO与领域对象之间的相互转换,数据交换,因此Assembler几乎总是同DTO一起出现。
 * 表面,门面(Facade): Facade的用意在于为远程客户端提供粗粒度的调用接口
 * 它的主要工作就是将一个用户请求委派给一个或多个Service进行处理,也就是我们常说的Controller。
 * 通常也会在这层做JSR303参数校验
 */

//Interface Adapters层：这一层是一个适配层，
// 这一层中需要将出入参的DTO和业务层的VO/DO对象进行转换。
// 这一层不要包含任何的业务逻辑，只包含参数转换和业务无关的校验逻辑。
// 接口返回值缓存类的逻辑，可以放在这个模块中实现，因为这个动作不包含业务逻辑。

/**
 * |--- interface                     -- 适配器层 应用与外部应用交互适配
 * |      |--- controller           -- 控制器层，API中的接口的实现
 * |      |       |--- assembler    -- 装配器，DTO和领域模型的转换
 * |      |       |--- impl         -- 协议层中接口的实现
 * |      |--- repository           -- 仓储层
 * |      |       |--- assembler    -- 装配器，PO和领域模型的转换
 * |      |       |--- impl         -- 领域层中仓储接口的实现
 * |      |--- rpc                  -- RPC层,Domain层中port中依赖的外部的接口实现，调用远程RPC接口
 * |      |--- task                 -- 任务，主要是调度任务的适配器
 */

dependencies {
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-ddd:taotao-cloud-ddd-api")
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-ddd:taotao-cloud-ddd-application")

    //implementation "io.github.shuigedeng:taotao-cloud-starter-facility-tencent"
    //implementation "io.github.shuigedeng:taotao-cloud-starter-facility-zookeeper"
    //implementation "io.github.shuigedeng:taotao-cloud-starter-facility-huawei"
    implementation "io.github.shuigedeng:taotao-cloud-starter-seata"
    implementation "io.github.shuigedeng:taotao-cloud-starter-sentinel"
    implementation "io.github.shuigedeng:taotao-cloud-starter-facility-alibaba"
    implementation "io.github.shuigedeng:taotao-cloud-starter-dubbo"
    implementation "io.github.shuigedeng:taotao-cloud-starter-eventbus"
    implementation "io.github.shuigedeng:taotao-cloud-starter-mq-pulsar"
    implementation "io.github.shuigedeng:taotao-cloud-starter-mq-rocketmq"
    implementation "io.github.shuigedeng:taotao-cloud-starter-mq-rabbitmq"
    implementation "io.github.shuigedeng:taotao-cloud-starter-mq-kafka"
    implementation "io.github.shuigedeng:taotao-cloud-starter-mq-stream"
    implementation "io.github.shuigedeng:taotao-cloud-starter-grpc"
    implementation "io.github.shuigedeng:taotao-cloud-starter-lock"
    implementation "io.github.shuigedeng:taotao-cloud-starter-dingtalk"
    //implementation "io.github.shuigedeng:taotao-cloud-starter-rxjava"
    implementation "io.github.shuigedeng:taotao-cloud-starter-laytpl"
    implementation "io.github.shuigedeng:taotao-cloud-starter-elk"
    //implementation "io.github.shuigedeng:taotao-cloud-starter-canal"
    implementation "io.github.shuigedeng:taotao-cloud-starter-captcha"
    implementation "io.github.shuigedeng:taotao-cloud-starter-office"
    implementation "io.github.shuigedeng:taotao-cloud-starter-third-client"
    //implementation "io.github.shuigedeng:taotao-cloud-starter-security-satoken"
    implementation("io.github.shuigedeng:taotao-cloud-starter-web") {
        exclude group: "com.baomidou", module: "dynamic-datasource-spring-boot3-starter"
    }

    //AVIATOR——轻量级JAVA表达式求值引擎 https://blog.csdn.net/ZhangQingmu/article/details/125087255
    //https://code.google.com/p/aviator/
    //http://code.google.com/p/aviator/wiki/User_Guide_zh
    //https://search.maven.org/artifact/com.googlecode.aviator/aviator
    implementation "com.googlecode.aviator:aviator:5.4.1"

    //https://search.maven.org/artifact/com.google.protobuf/protobuf-java
    implementation "com.google.protobuf:protobuf-java:3.25.2"
    //https://search.maven.org/artifact/com.google.protobuf/protobuf-java-util
    implementation "com.google.protobuf:protobuf-java-util:3.25.2"
    //https://search.maven.org/artifact/com.googlecode.protobuf-java-format/protobuf-java-format
    //implementation "com.googlecode.protobuf-java-format:protobuf-java-format:1.4"

    //https://search.maven.org/artifact/io.protostuff/protostuff-core
    implementation "io.protostuff:protostuff-core:1.8.0"
    //https://search.maven.org/artifact/io.protostuff/protostuff-runtime
    implementation "io.protostuff:protostuff-runtime:1.8.0"

    //https://search.maven.org/artifact/io.github.memorydoc/gobrs-async-starter
    implementation "io.github.memorydoc:gobrs-async-starter:1.3.1-RELEASE"
    implementation 'io.github.memorydoc:gobrs-async-skywalking-plugin:1.3.1-RELEASE'
    implementation 'io.github.memorydoc:gobrs-async-trace-plugin:1.3.1-RELEASE'
    implementation 'io.github.memorydoc:gobrs-async-monitor-plugin:1.3.1-RELEASE'

    //https://search.maven.org/artifact/org.apache.velocity/velocity-engine-core
    implementation 'org.apache.velocity:velocity-engine-core:2.3'

    //https://search.maven.org/artifact/org.freemarker/freemarker
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'

    //https://search.maven.org/artifact/com.github.gavlyukovskiy/datasource-proxy-spring-boot-starter
    implementation 'com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:1.9.1'

    implementation 'com.github.oshi:oshi-core:6.4.10'

    //implementation "io.github.shuigedeng:taotao-cloud-starter-apt")
    //annotationProcessor "io.github.shuigedeng:taotao-cloud-starter-apt")

    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    api "com.querydsl:querydsl-jpa:5.1.0:jakarta"
    api "jakarta.persistence:jakarta.persistence-api:3.1.0"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"
}




