dependencies {
    implementation project(":taotao-cloud-microservice:taotao-cloud-business:taotao-cloud-job:taotao-cloud-job-api")

    implementation("io.github.shuigedeng:taotao-cloud-starter-web") {
        exclude group: "com.baomidou", module: "dynamic-datasource-spring-boot-starter"
    }
    implementation "io.github.shuigedeng:taotao-cloud-starter-dubbo"
    implementation "io.github.shuigedeng:taotao-cloud-starter-disruptor"
    implementation "io.github.shuigedeng:taotao-cloud-starter-dingtalk"

    implementation "io.github.shuigedeng:taotao-cloud-starter-job-elastic"
    implementation "io.github.shuigedeng:taotao-cloud-starter-job-xxl"
    implementation "io.github.shuigedeng:taotao-cloud-starter-job-schedule"
    implementation "io.github.shuigedeng:taotao-cloud-starter-job-quartz"
    implementation "io.github.shuigedeng:taotao-cloud-starter-job-powerjob"

    //implementation "io.github.shuigedeng:taotao-cloud-starter-mq-pulsar"
    //implementation "io.github.shuigedeng:taotao-cloud-starter-mq-rocketmq"
    //implementation "io.github.shuigedeng:taotao-cloud-starter-mq-rabbitmq"
    implementation "io.github.shuigedeng:taotao-cloud-starter-mq-kafka"
    //implementation "io.github.shuigedeng:taotao-cloud-starter-mq-stream"

    implementation "io.github.shuigedeng:taotao-cloud-starter-alibaba-seata"
    implementation "io.github.shuigedeng:taotao-cloud-starter-alibaba-sentinel"
    implementation "io.github.shuigedeng:taotao-cloud-starter-facility-alibaba"

    //implementation 'com.maciejwalkowiak.spring:spring-boot-startup-report:0.2.0'

    //https://search.maven.org/artifact/com.github.gavlyukovskiy/datasource-proxy-spring-boot-starter
    //implementation 'com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:1.9.0'

    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    api "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    api "jakarta.persistence:jakarta.persistence-api:3.1.0"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"
}

mainClassName = "com.taotao.cloud.job.biz.TaoTaoCloudJobApplication"
description = "定时任务中心"
archivesBaseName = 'taotao-cloud-job'

graalvmNative {
    //禁用工具链检测
    //toolchainDetection = false

    //agent {
    //    defaultMode = "standard" // Default agent mode if one isn't specified using `-Pagent=mode_name`
    //    enabled = true // Enables the agent
    //    modes {
    //        // The standard agent mode generates metadata without conditions.
    //        standard {
    //        }
    //        // The conditional agent mode generates metadata with conditions.
    //        conditional {
    //            userCodeFilterPath = "path-to-filter.json" // Path to a filter file that determines classes which will be used in the metadata conditions.
    //            extraFilterPath = "path-to-another-filter.json" // Optional, extra filter used to further filter the collected metadata.
    //        }
    //        // The direct agent mode allows users to directly pass options to the agent.
    //        direct {
    //            // {output_dir} is a special string expanded by the plugin to where the agent files would usually be output.
    //            options.add("config-output-dir={output_dir}")
    //            options.add("experimental-configuration-with-origins")
    //        }
    //    }
    //    callerFilterFiles.from("filter.json")
    //    accessFilterFiles.from("filter.json")
    //    builtinCallerFilter = true
    //    builtinHeuristicFilter = true
    //    enableExperimentalPredefinedClasses = false
    //    enableExperimentalUnsafeAllocationTracing = false
    //    trackReflectionMetadata = true
    //    // Copies metadata collected from tasks into the specified directories.
    //    metadataCopy {
    //        inputTaskNames.add("test") // Tasks previously executed with the agent attached.
    //        outputDirectories.add("src/main/resources/META-INF/native-image")
    //        mergeWithExisting = true // Instead of copying, merge with existing metadata in the output directories.
    //    }
    //    /*
    //    By default, if `-Pagent` is specified, all tasks that extend JavaForkOptions are instrumented.
    //    This can be limited to only specific tasks that match this predicate.
    //     */
    //    tasksToInstrumentPredicate = t -> true
    //}

    binaries {
        //all {
        //    resources.autodetect()
        //}
        main {
            //javaLauncher = javaToolchains.launcherFor {
            //    languageVersion = JavaLanguageVersion.of(8)
            //    vendor = JvmVendorSpec.matching("GraalVM Community")
            //}

            imageName.set('taotao-cloud-job')
            buildArgs.add('--verbose')
            buildArgs.add('--add-opens=java.base/java.nio=ALL-UNNAMED')
            buildArgs.add('--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED')
            buildArgs.add('--add-opens=java.base/jdk.internal.ref=ALL-UNNAMED')
            buildArgs.add('--trace-class-initialization=ch.qos.logback.classic.Logger')
            buildArgs.add('--trace-class-initialization=io.netty.util.AbstractReferenceCounted')
            buildArgs.add('--trace-class-initialization=io.netty.channel.DefaultFileRegion')
            buildArgs.add('--trace-object-instantiation=ch.qos.logback.core.AsyncAppenderBase$Worker')
            buildArgs.add('--no-fallback')
            buildArgs.add('--initialize-at-build-time=org.slf4j.LoggerFactory,ch.qos.logback')
            buildArgs.add('--initialize-at-run-time=io.netty')
            buildArgs.add('--initialize-at-build-time=org.springframework.util.unit.DataSize')
            buildArgs.add('--initialize-at-build-time=org.slf4j.MDC')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.classic.Level')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.classic.Logger')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.core.util.StatusPrinter')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.core.status.StatusBase')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.core.status.InfoStatus')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.core.spi.AppenderAttachableImpl')
            buildArgs.add('--initialize-at-build-time=org.slf4j.LoggerFactory')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.core.util.Loader')
            buildArgs.add('--initialize-at-build-time=org.slf4j.impl.StaticLoggerBinder')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.classic.spi.ThrowableProxy')
            buildArgs.add('--initialize-at-build-time=ch.qos.logback.core.CoreConstants')
            buildArgs.add('--initialize-at-build-time=io.netty.channel.DefaultFileRegion')
            buildArgs.add('--initialize-at-build-time=io.netty.util.AbstractReferenceCounted')
            buildArgs.add('--report-unsupported-elements-at-runtime')
            buildArgs.add('--allow-incomplete-classpath')
            buildArgs.add('-H:+ReportExceptionStackTraces')
        }
    }
}

//nativeCompile {
//    buildArgs('-H:ReflectionConfigurationFiles=../../../src/main/resources/reflection-config.json')
//    buildArgs('-H:ReflectionConfigurationFiles=./reflection-config.json')
//}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
        resolutionStrategy.cacheDynamicVersionsFor 0, "seconds"

        resolutionStrategy {
            //force "org.codehaus.groovy:groovy:4.0.0"
            force 'org.antlr:antlr4:4.12.0'
        }

        //exclude group: "log4j", module: "log4j"
        //exclude group: "log4j", module: "slf4j-simple"
        //exclude group: "org.slf4j", module: "slf4j-log4j12"
        //exclude group: "org.apache.logging.log4j", module: "log4j-slf4j-impl"
        //exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
        //exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
}
