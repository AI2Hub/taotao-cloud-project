server:
  port: 33336
  http2:
    enabled: true
  undertow:
    buffer-size: 2048
    direct-buffers: true

redisson:
  password: ${TAOTAO_CLOUD_REDIS_PASSWORD:taotao-cloud}
  single-server-config:
    address: ${TAOTAO_CLOUD_REDIS_HOST:192.168.10.200}:${TAOTAO_CLOUD_REDIS_PORT:6379}

arthas:
  # telnetPort、httpPort为 -1 ，则不listen telnet端口，为 0 ，则随机telnet端口
  # 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。
  # ~/logs/arthas/arthas.log (用户目录下面)里可以找到具体端口日志
  telnetPort: -1
  httpPort: -1
  # 127.0.0.1只能本地访问，0.0.0.0则可网络访问，但是存在安全问题
  ip: 0.0.0.0
  agent-id: ${spring.application.name}
  app-name: ${spring.application.name}
  tunnel-server: ws://192.168.10.200:7777/ws

spring:
  main:
    allow-bean-definition-overriding: true
    banner-mode: off
    allow-circular-references: true
  application:
    name: taotao-cloud-auth
  sleuth:
    enabled: true
    web:
      client:
        enabled: true
    sampler:
      probability: 1.0
  zipkin:
    enabled: true
    base-url: http://${TAOTAO_CLOUD_ZIPKIN_HOST:192.168.10.200}:${TAOTAO_CLOUD_ZIPKIN_PORT:9411}
    discoveryClientEnabled: false
    sender:
      type: WEB
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.10.200}:${TAOTAO_CLOUD_MYSQL_PORT:3306}/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: ${TAOTAO_CLOUD_MYSQL_USERNAME:root}
    password: ${TAOTAO_CLOUD_MYSQL_PASSWORD:123456}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      auto-commit: true
      connection-timeout: 30000
      idle-timeout: 25000
      login-timeout: 5
      validation-timeout: 3000
      max-lifetime: 50000
      read-only: false
      connection-test-query: SELECT 1
      maximum-pool-size: 15
      minimum-idle: 10
      pool-name: MyHikariCP
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
  jpa:
    database: mysql
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  redis:
    #host: ${TAOTAO_CLOUD_REDIS_HOST:192.168.10.200}
    #port: ${TAOTAO_CLOUD_REDIS_PORT:6379}
    #database: 1
    #password: ${TAOTAO_CLOUD_REDIS_PASSWORD:taotao-cloud}
    connect-timeout: 60000
    cluster:
      nodes: 192.168.10.200:7100,192.168.10.200:7101,192.168.10.200:7102,192.168.10.200:7103,192.168.10.200:7104,192.168.10.200:7105
      max-redirects: 3
    #sentinel:
    #  master:
    #  nodes:
    client-type: lettuce
    lettuce:
      pool:
        max-active: 1500
        max-wait: 5000
        max-idle: 500
        min-idle: 100
    redisson:
      config: |
        clusterServersConfig:
          idleConnectionTimeout: 10000
          connectTimeout: 10000
          timeout: 3000
          retryAttempts: 3
          retryInterval: 1500
          failedSlaveReconnectionInterval: 3000
          failedSlaveCheckInterval: 60000
          password: null
          subscriptionsPerConnection: 5
          clientName: null
          loadBalancer: !<org.redisson.connection.balancer.RoundRobinLoadBalancer> {}
          subscriptionConnectionMinimumIdleSize: 1
          subscriptionConnectionPoolSize: 50
          slaveConnectionMinimumIdleSize: 24
          slaveConnectionPoolSize: 64
          masterConnectionMinimumIdleSize: 24
          masterConnectionPoolSize: 64
          readMode: "SLAVE"
          subscriptionMode: "SLAVE"
          nodeAddresses:
          - "redis://192.168.10.200:7100"
          - "redis://192.168.10.200:7101"
          - "redis://192.168.10.200:7102"
          - "redis://192.168.10.200:7103"
          - "redis://192.168.10.200:7104"
          - "redis://192.168.10.200:7105"
          scanInterval: 1000
          pingConnectionInterval: 0
          keepAlive: false
          tcpNoDelay: false
        threads: 16
        nettyThreads: 32
        codec: !<org.redisson.codec.MarshallingCodec> {}
        transportMode: "NIO"
  kafka:
    bootstrap-servers: ${TAOTAO_CLOUD_KAFKA_HOST:192.168.10.200}:${TAOTAO_CLOUD_KAFKA_PORT:9092}
    producer:
      retries: 1
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: com.taotao.cloud.logger.serialization.ObjectSerializer
      acks: 0
      properties:
        linger.ms: 100
    consumer:
      auto-commit-interval: 1S
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      concurrency: 5
      ack-mode: manual_immediate
      missing-topics-fatal: false
  security:
    oauth2:
      client:
        registration:
          weibo:
            provider: weibo
            client-id: xxxxx
            client-secret: xxxxx
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/weibo"
            scope: follow_app_official_microblog
          github:
            client-id: xxxx
            client-secret: xxxx
          gitee:
            client-id: 81bc2a5852cbcd35f94fa77512e1efb776b57102e1fb9b82105acf7b412f072b
            client-secret: 6cf101f97728215e3455d19bf84e4b277be505a9690cf0e9558bc24904dd6ad6
            authorization-grant-type: authorization_code
            redirect-uri: http://cf4b-183-67-94-181.ngrok.io/login/oauth2/code/gitee
          qq:
            client-id: xxx
            client-secret: xxxx
            authorization-grant-type: authorization_code
            redirect-uri: https://xxx/login/oauth2/code/qq
            scope: get_user_info
            client-authentication-method: post
        provider:
          weibo:
            authorization-uri: https://api.weibo.com/oauth2/authorize
            token-uri: https://api.weibo.com/oauth2/access_token
            user-info-uri: https://api.weibo.com/2/users/show.json
          gitee:
            authorization-uri: https://gitee.com/oauth/authorize
            token-uri: https://gitee.com/oauth/token
            user-info-uri: https://gitee.com/api/v5/user
          qq:
            authorization-uri: https://graph.qq.com/oauth2.0/authorize
            token-uri: https://graph.qq.com/oauth2.0/token
            user-info-uri: https://graph.qq.com/oauth2.0/me
            user-info-authentication-method: form
      resourceserver:
        jwt:
          jwk-set-uri: http://127.0.0.1:33336/oauth2/jwks
  cloud:
    compatibility-verifier:
      enabled: false
    loadbalancer:
      enabled: true
    stream:
      bindings:
        sms-output:
          destination: sms-topic
          binder: rabbit
        sms-input:
          destination: sms-topic
          group: sms-group
          binder: rabbit
        email-output:
          destination: email-topic
          #content-type: application/json
          binder: rocketmq
        email-input:
          destination: email-topic
          group: email-group
          binder: rocketmq
        order-output:
          destination: order-topic
          #content-type: application/json
          binder: kafka
        order-input:
          destination: order-topic
          group: order-group
          binder: kafka
      rocketmq:
        binder:
          name-server: 192.168.10.200:9876
      rabbit:
        bindings:
          sms-output:
            producer:
              #routing-key-expression: headers.routingKey   # 发送端路由key
              delayed-exchange: false    # 开启延时队列
          sms-input:
            consumer:
              #binding-routing-key: login.user.succeed   # 生产监听路由表达式
              delayed-exchange: false    # 开启延时队列
              #auto-bind-dlq: true   # 绑定死信队列
              #republish-to-dlq: true  # 重投到死信队列并带有报错信息
        binder:
          admin-addresses: 192.168.10.200:5672
      kafka:
        binder:
          brokers: 192.168.10.200:9092
          auto-create-topics: true
        bindings:
          order-output:
            producer:
              sync: true
              bufferSize: 16384
          order-input:
            consumer:
              txCommitRecovered: true
taotao:
  cloud:
    p6spy:
      enabled: true
      dateformat: yyyy-MM-dd HH:mm:ss
      driverlist: com.mysql.cj.jdbc.Driver
      database-dialect-date-format: yyyy-MM-dd HH:mm:ss
      appender: com.taotao.cloud.p6spy.logger.P6spyLogger
      log-message-format: com.taotao.cloud.p6spy.logger.P6spyLogFormat
    data:
      jpa:
        enabled: true
        packages: com.taotao.cloud.auth.biz.models
        tenant:
          enabled: false
    logger:
      enabled: true
    kafka:
      enabled: true
    feign:
      enabled: true
      loadbalancer:
        enabled: true
    redis:
      cache:
        enabled: true
    sentinel:
      enabled: true
    core:
      env: dev
    sms:
      enabled: true
      type: aliyun
      aliyun:
        access-key: asf23r
        secret-key: sldflasdf
        sign-name: ""
        template-id: slfsdf
        product: sdfa
    openapi:
      enabled: true
      group: ${spring.application.name}
      version: ${taotaoCloudVersion}
      title: 认证中心模块

feign:
  sentinel:
    enabled: true
  okhttp:
    enabled: true
  httpclient:
    enabled: false
    max-connections: 10000
    max-connections-per-route: 1000
  client:
    config:
      feign-name:
        connectTimeout: 300000
        readTimeout: 300000
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
    env:
      post:
        enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
  health:
    mail:
      enabled: false
    elasticsearch:
      enabled: false

logging:
  level:
    root: INFO
    org.springframework.web: off
    org.springframework.security: debug
    org.springframework.security.oauth2: debug
    org.springframework.boot.autoconfigure: off

oauth2:
  token:
    issuer: http://127.0.0.1:9000/springauthserver

jwk:
  set:
    uri: http://127.0.0.1:33336/oauth2/jwks
