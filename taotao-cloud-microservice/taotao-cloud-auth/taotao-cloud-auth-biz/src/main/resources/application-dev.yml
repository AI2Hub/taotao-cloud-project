server:
  port: 33336
  http2:
    enabled: true
  undertow:
    buffer-size: 2048
    direct-buffers: true

redisson:
  #在Redis节点里显示的客户端名称。
  client-name: ${spring.application.name}
  #用于节点身份验证的密码
  password: taotao-cloud
  #锁的模式.如果不设置, REENTRANT(可重入锁),FAIR(公平锁),MULTIPLE(联锁),REDLOCK(红锁),READ(读锁), WRITE(写锁)
  lock-model: auto
  #集群模式:SINGLE(单例),SENTINEL(哨兵),MASTERSLAVE(主从),CLUSTER(集群),REPLICATED(云托管)
  model: cluster
  #Redisson的对象编码类是用于将对象进行序列化和反序列化，以实现对该对象在Redis里的读取和存储
  codec: "com.zengtengpeng.codec.MyJsonJacksonCodec"
  #这个线程池数量被所有RTopic对象监听器，RRemoteService调用者和RExecutorService任务共同共享。
  threads: 16
  #这个线程池数量是在一个Redisson实例内，被其创建的所有分布式数据类型和服务，以及底层客户端所一同共享的线程池里保存的线程数量。
  netty_threads: 32
  #TransportMode.NIO,TransportMode.EPOLL - 需要依赖里有netty-transport-native-epoll包（Linux） TransportMode.KQUEUE - 需要依赖里有 netty-transport-native-kqueue包（macOS）
  transport_mode: nio
  #如果当前连接池里的连接数量超过了最小空闲连接数，而同时有连接空闲时间超过了该数值，那么这些连接将会自动被关闭，并从连接池里去掉。时间单位是毫秒
  idleConnectionTimeout: 1000
  #同任何节点建立连接时的等待超时。时间单位是毫秒
  connectTimeout: 1000
  #等待节点回复命令的时间。该时间从命令发送成功时开始计时。
  timeout: 3000
  #如果尝试达到 retryAttempts（命令失败重试次数） 仍然不能将命令发送至某个指定的节点时，将抛出错误。如果尝试在此限制之内发送成功，则开始启用 timeout（命令等待超时） 计时。
  retryAttempts: 3
  #在一条命令发送失败以后，等待重试发送的时间间隔。时间单位是毫秒。
  retryInterval: 1500
  #	每个连接的最大订阅数量。
  subscriptionsPerConnection: 5
  #开启SSL终端识别能力。
  sslEnableEndpointIdentification: true
  #确定采用哪种方式（JDK或OPENSSL）来实现SSL连接。
  sslProvider: jdk
  ssl-truststore:
  ssl-truststore-password:
  ssl-keystore:
  ssl-keystore-password:
  #监控锁的看门狗超时时间单位为毫秒。该参数只适用于分布式锁的加锁请求中未明确使用leaseTimeout参数的情况。如果该看门口未使用lockWatchdogTimeout去重新调整一个分布式锁的lockWatchdogTimeout超时，那么这个锁将变为失效状态。这个参数可以用来避免由Redisson客户端节点宕机或其他原因造成死锁的情况。
  lockWatchdogTimeout: 30000
  #通过该参数来修改是否按订阅发布消息的接收顺序出来消息，如果选否将对消息实行并行处理，该参数只适用于订阅发布消息的情况。
  keepPubSubOrder: true
  pingConnectionInterval: 30000
  keepAlive: false
  tcpNoDelay: false
  referenceEnabled: true
  useScriptCache: false
  minCleanUpDelay: 5
  maxCleanUpDelay: 1800
  #等待获取锁超时时间,-1则是一直等待
  attemptTimeout: 10000
  dataValidTime: 1800000
  #single_server_config:
  #  #服务器地址,必填ip:port
  #  address: "192.168.10.200:6379"
  #  #用于发布和订阅连接的最小保持连接数（长连接）。Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。
  #  subscription_connection_minimum_idle_size: 1
  #  #用于发布和订阅连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
  #  subscription_connection_pool_size: 50
  #  #最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
  #  connection_minimum_idle_size: 24
  #  #连接池最大容量。连接池的连接数量自动弹性伸缩。
  #  connection_pool_size: 64
  #  #尝试连接的数据库编号。
  #  database: 3
  #  #用来指定检查节点DNS变化的时间间隔。使用的时候应该确保JVM里的DNS数据的缓存时间保持在足够低的范围才有意义。用-1来禁用该功能。
  #  dns_monitoring_interval: 5000
  multiple-server-config:
    #在多Redis服务节点的环境里，可以选用以下几种负载均衡方式选择一个节点：
    #org.redisson.connection.balancer.WeightedRoundRobinBalancer - 权重轮询调度算法
    #org.redisson.connection.balancer.RoundRobinLoadBalancer - 轮询调度算法
    #org.redisson.connection.balancer.RandomLoadBalancer - 随机调度算法
    loadBalancer: "org.redisson.connection.balancer.RoundRobinLoadBalancer"
    #多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时读取反映速度。
    slaveConnectionMinimumIdleSize: 32
    #多从节点的环境里，每个 从服务节点里用于普通操作（非 发布和订阅）连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
    slaveConnectionPoolSize: 64
    failedSlaveReconnectionInterval: 3000
    failedSlaveCheckInterval: 180000
    #多节点的环境里，每个 主节点的最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
    masterConnectionMinimumIdleSize: 32
    #多主节点的环境里，每个 主节点的连接池最大容量。连接池的连接数量自动弹性伸缩。
    masterConnectionPoolSize: 64
    #设置读取操作选择节点的模式。 可用值为： SLAVE - 只在从服务节点里读取。 MASTER - 只在主服务节点里读取。 MASTER_SLAVE - 在主从服务节点里都可以读取。
    readMode: slave
    #设置订阅操作选择节点的模式。 可用值为： SLAVE - 只在从服务节点里订阅。 MASTER - 只在主服务节点里订阅。
    subscriptionMode: slave
    #用于发布和订阅连接的最小保持连接数（长连接）。Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。 redisson.multiple-server-config.subscriptionConnectionPoolSize
    subscriptionConnectionMinimumIdleSize: 1
    subscriptionConnectionPoolSize: 50
    #监测DNS的变化情况的时间间隔。
    dnsMonitoringInterval: 5000
    #服务器节点地址.必填
    #redisson.multiple-server-config.node-addresses[0]=127.0.0.1:6379
    #redisson.multiple-server-config.node-addresses[1]=127.0.0.1:6380
    #redisson.multiple-server-config.node-addresses[2]=127.0.0.1:6381
    nodeAddresses:
      - "192.168.10.200:6381"
      - "192.168.10.200:6382"
      - "192.168.10.200:6383"
      - "192.168.10.200:6384"
      - "192.168.10.200:6385"
      - "192.168.10.200:6386"
    #(哨兵模式,云托管,主从模式特有)尝试连接的数据库编号。
    database: 1
    #(哨兵模式特有)主服务器的名称是哨兵进程中用来监测主从服务切换情况的。
    masterName:
    #(集群,哨兵,云托管模特特有) 对Redis集群节点状态扫描的时间间隔。单位是毫秒。
    scanInterval: 1000

dubbo:
  scan:
    base-packages: com.taotao.cloud.auth.biz.service
  application:
    #id: ${spring.application.name}
    name: ${spring.application.name}
    version: ${taotaoCloudVersion}
    #owner: 981376577
    #architecture: china
    #organization: taotao-cloud
    #metadata-type: local
    #environment: dev
    # qos服务 通过一些命令返回响应结果、达到动态控制目的
    #qos-port: 20880
    #qos-enable: true
    #qos-accept-foreign-ip: false
    #logger: slf4j
  cloud:
    subscribed-services: taotao-cloud-sys
    registry-type: dubbo-cloud
  registry:
    address: nacos://192.168.10.200:8000?group=DUBBO_REGISTRY_GROUP&namespace=343852d5-6e0d-4e27-8719-7866452e5ab0
    timeout: 15000
    #username:
    #password:
    #port:
    #protocol:
    #version: ${taotaoCloudVersion}
    #check: true
    #register: true
    #weight: 10
  protocol:
    id: dubbo
    name: dubbo
    port: -1
    ssl-enabled: false
    threads: 200
    accesslog: ${user.home}/logs/${spring.application.name}/dubbo/access.log
    #serialization: kryo
    #status: server
    #payload: 83886080
  provider:
    id: dubbo
    timeout: 300000
    loadbalance: roundrobin
    version: ${taotaoCloudVersion}
  consumer:
    check: false
    timeout: 300000
    loadbalance: roundrobin
    version: ${taotaoCloudVersion}
  #module:
  #  name: ${spring.application.name}
  #monitor:
  #  id: ${spring.application.name}
  #metadata-report:
  #  id: ${spring.application.name}
  config-center:
    check: false

arthas:
  # telnetPort、httpPort为 -1 ，则不listen telnet端口，为 0 ，则随机telnet端口
  # 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。
  # ~/logs/arthas/arthas.log (用户目录下面)里可以找到具体端口日志
  telnetPort: -1
  httpPort: -1
  # 127.0.0.1只能本地访问，0.0.0.0则可网络访问，但是存在安全问题
  ip: 0.0.0.0
  agent-id: ${spring.application.name}
  app-name: ${spring.application.name}
  tunnel-server: ws://192.168.10.200:7777/ws

spring:
  main:
    allow-bean-definition-overriding: true
    banner-mode: off
    allow-circular-references: true
  application:
    name: taotao-cloud-auth
  sleuth:
    enabled: true
    web:
      client:
        enabled: true
    sampler:
      probability: 1.0
  zipkin:
    enabled: true
    base-url: http://${TAOTAO_CLOUD_ZIPKIN_HOST:192.168.10.200}:${TAOTAO_CLOUD_ZIPKIN_PORT:9411}
    discoveryClientEnabled: false
    sender:
      type: WEB
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.10.200}:${TAOTAO_CLOUD_MYSQL_PORT:3306}/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: ${TAOTAO_CLOUD_MYSQL_USERNAME:root}
    password: ${TAOTAO_CLOUD_MYSQL_PASSWORD:123456}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      auto-commit: true
      connection-timeout: 30000
      idle-timeout: 25000
      login-timeout: 5
      validation-timeout: 3000
      max-lifetime: 50000
      read-only: false
      connection-test-query: SELECT 1
      maximum-pool-size: 15
      minimum-idle: 10
      pool-name: MyHikariCP
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
  jpa:
    database: mysql
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  redis:
    #host: ${TAOTAO_CLOUD_REDIS_HOST:192.168.10.200}
    #port: ${TAOTAO_CLOUD_REDIS_PORT:6379}
    #database: 1
    password: taotao-cloud
    connect-timeout: 60000
    cluster:
      nodes: 192.168.10.200:6381,192.168.10.200:6382,192.168.10.200:6383,192.168.10.200:6384,192.168.10.200:6385,192.168.10.200:6386
      max-redirects: 3
    #sentinel:
    #  master:
    #  nodes:
    client-type: lettuce
    lettuce:
      pool:
        max-active: 1500
        max-wait: 5000
        max-idle: 500
        min-idle: 100
    redisson:
      config: |
        clusterServersConfig:
          idleConnectionTimeout: 10000
          connectTimeout: 10000
          timeout: 3000
          retryAttempts: 3
          retryInterval: 1500
          failedSlaveReconnectionInterval: 3000
          failedSlaveCheckInterval: 60000
          password: taotao-cloud
          subscriptionsPerConnection: 5
          clientName: null
          loadBalancer: !<org.redisson.connection.balancer.RoundRobinLoadBalancer> {}
          subscriptionConnectionMinimumIdleSize: 1
          subscriptionConnectionPoolSize: 50
          slaveConnectionMinimumIdleSize: 24
          slaveConnectionPoolSize: 64
          masterConnectionMinimumIdleSize: 24
          masterConnectionPoolSize: 64
          readMode: "SLAVE"
          subscriptionMode: "SLAVE"
          nodeAddresses:
          - "redis://192.168.10.200:6381"
          - "redis://192.168.10.200:6382"
          - "redis://192.168.10.200:6383"
          - "redis://192.168.10.200:6384"
          - "redis://192.168.10.200:6385"
          - "redis://192.168.10.200:6386"
          scanInterval: 1000
          pingConnectionInterval: 0
          keepAlive: false
          tcpNoDelay: false
        threads: 16
        nettyThreads: 32
        codec: !<org.redisson.codec.MarshallingCodec> {}
        transportMode: "NIO"
  kafka:
    bootstrap-servers: 192.168.10.200:9092,192.168.10.200:9093,192.168.10.200:9094
    producer:
      retries: 1
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: com.taotao.cloud.logger.serialization.ObjectSerializer
      acks: 0
      properties:
        linger.ms: 100
    consumer:
      auto-commit-interval: 1S
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      concurrency: 5
      ack-mode: manual_immediate
      missing-topics-fatal: false
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: xxxxx
            client-secret: xxxxx
            authorization-grant-type: authorization_code
            redirect-uri: https://xxx/login/oauth2/code/google
            scope: openid,profile,email,address,phone
          weibo:
            provider: weibo
            client-id: xxxxx
            client-secret: xxxxx
            authorization-grant-type: authorization_code
            redirect-uri: https://xxx/login/oauth2/code/weibo
            scope: follow_app_official_microblog
          github:
            client-id: xxxx
            client-secret: xxxx
          gitee:
            provider: gitee
            client-name: gitee
            client-id: 81bc2a5852cbcd35f94fa77512e1efb776b57102e1fb9b82105acf7b412f072b
            client-secret: 6cf101f97728215e3455d19bf84e4b277be505a9690cf0e9558bc24904dd6ad6
            authorization-grant-type: authorization_code
            redirect-uri: http://1fe9ccce.cpolar.cn/login/oauth2/code/gitee
            scope:
              - user_info
          qq:
            client-id: xxx
            client-secret: xxxx
            authorization-grant-type: authorization_code
            redirect-uri: https://xxx/login/oauth2/code/qq
            scope: get_user_info
            client-authentication-method: post
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://www.googleapis.com/oauth2/v4/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: IdTokenClaimNames.SUB
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
          weibo:
            authorization-uri: https://api.weibo.com/oauth2/authorize
            token-uri: https://api.weibo.com/oauth2/access_token
            user-info-uri: https://api.weibo.com/2/users/show.json
          gitee:
            authorization-uri: https://gitee.com/oauth/authorize
            token-uri: https://gitee.com/oauth/token
            user-name-attribute: id
            user-info-uri: https://gitee.com/api/v5/user
          qq:
            authorization-uri: https://graph.qq.com/oauth2.0/authorize
            token-uri: https://graph.qq.com/oauth2.0/token
            user-info-uri: https://graph.qq.com/oauth2.0/me
            user-info-authentication-method: form
      resourceserver:
        jwt:
          jwk-set-uri: http://127.0.0.1:33336/oauth2/jwks
  cloud:
    compatibility-verifier:
      enabled: false
    loadbalancer:
      enabled: true
    stream:
      bindings:
        sms-output:
          destination: sms-topic
          binder: rabbit
        sms-input:
          destination: sms-topic
          group: sms-group
          binder: rabbit
        email-output:
          destination: email-topic
          #content-type: application/json
          binder: rocketmq
        email-input:
          destination: email-topic
          group: email-group
          binder: rocketmq
        order-output:
          destination: order-topic
          #content-type: application/json
          binder: kafka
        order-input:
          destination: order-topic
          group: order-group
          binder: kafka
      rocketmq:
        binder:
          name-server: 192.168.10.200:9876
      rabbit:
        bindings:
          sms-output:
            producer:
              #routing-key-expression: headers.routingKey   # 发送端路由key
              delayed-exchange: false    # 开启延时队列
          sms-input:
            consumer:
              #binding-routing-key: login.user.succeed   # 生产监听路由表达式
              delayed-exchange: false    # 开启延时队列
              #auto-bind-dlq: true   # 绑定死信队列
              #republish-to-dlq: true  # 重投到死信队列并带有报错信息
        binder:
          admin-addresses: 192.168.10.200:5672
      kafka:
        binder:
          brokers: 192.168.10.200:9092
          auto-create-topics: true
        bindings:
          order-output:
            producer:
              sync: true
              bufferSize: 16384
          order-input:
            consumer:
              txCommitRecovered: true
taotao:
  cloud:
    p6spy:
      enabled: true
      dateformat: yyyy-MM-dd HH:mm:ss
      driverlist: com.mysql.cj.jdbc.Driver
      database-dialect-date-format: yyyy-MM-dd HH:mm:ss
      appender: com.taotao.cloud.p6spy.logger.P6spyLogger
      log-message-format: com.taotao.cloud.p6spy.logger.P6spyLogFormat
    data:
      jpa:
        enabled: true
        packages: com.taotao.cloud.auth.biz.models
        tenant:
          enabled: false
    logger:
      enabled: true
    kafka:
      enabled: true
    feign:
      enabled: true
      loadbalancer:
        enabled: true
    redis:
      cache:
        enabled: true
    sentinel:
      enabled: true
    core:
      env: dev
    dubbo:
      enabled: true
    sms:
      enabled: true
      type: aliyun
      aliyun:
        sign-name: ""
        access-key-id: asf23r
        access-key-secret: sldflasdf
        templates:
          other: "niaho${{asdf}}$sdfasdfl"
        params-orders:
          other:
            - asdf
            - asdf23
            - asdf233
    openapi:
      enabled: true
      group: ${spring.application.name}
      version: ${taotaoCloudVersion}
      title: 认证中心模块
      packages-to-scan:
        - com.taotao.cloud.auth.biz.controller

feign:
  sentinel:
    enabled: true
  okhttp:
    enabled: true
  httpclient:
    enabled: false
    max-connections: 10000
    max-connections-per-route: 1000
  client:
    config:
      feign-name:
        connectTimeout: 300000
        readTimeout: 300000
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
    env:
      post:
        enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
  health:
    mail:
      enabled: false
    elasticsearch:
      enabled: false

logging:
  level:
    root: INFO
    org.springframework.web: off
    org.springframework.security: debug
    org.springframework.security.oauth2: debug
    org.springframework.boot.autoconfigure: off

oauth2:
  token:
    issuer: http://127.0.0.1:9000/springauthserver

jwk:
  set:
    uri: http://127.0.0.1:33336/oauth2/jwks
