plugins {
    id 'org.graalvm.buildtools.native' version '0.9.18'
}

subprojects {
    apply from: rootProject.file('gradle/springboot.gradle')
    apply from: rootProject.file('gradle/smart-doc.gradle')
    apply from: rootProject.file('gradle/springdoc-openapi.gradle')
    apply from: rootProject.file('gradle/docker.gradle')
    apply from: rootProject.file('gradle/google-tools-jib.gradle')
    //apply from: rootProject.file('gradle/sonar.gradle')
    apply from: rootProject.file('gradle/shadow.gradle')

    apply plugin: "org.graalvm.buildtools.native"

    task createProperties(dependsOn: processResources) {
        doLast {
            def fileDir = new File("$buildDir/resources/main");
            if (fileDir.exists() && fileDir.isDirectory()) {
                def pro = ["application.properties", "bootstrap.properties"]
                pro.forEach(item -> {
                    new File("$buildDir/resources/main/$item").withWriter { w ->
                        def projectProperties = project.properties
                        Properties p = new Properties()
                        projectProperties.each { entry ->
                            p[entry.key.toString()] = entry.value.toString()
                        }

                        p.store w, null
                    }
                })
            }
        }
    }

    classes {
        dependsOn createProperties
    }

    dependencies {
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "org.testcontainers:junit-jupiter"
        testImplementation "org.springframework.boot:spring-boot-starter-web"

        //https://search.maven.org/artifact/org.jeasy/easy-random
        testImplementation 'org.jeasy:easy-random:5.0.0'
        //https://search.maven.org/artifact/com.github.javafaker/javafaker
        testImplementation('com.github.javafaker:javafaker:1.0.2') {
            exclude group: "org.yaml", module: "snakeyaml"
        }

        api "io.soabase.record-builder:record-builder-core"
        annotationProcessor "io.soabase.record-builder:record-builder-processor:${recordBuilderVersion}"

        api "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

        api "io.soabase.record-builder:record-builder-core"
        annotationProcessor "io.soabase.record-builder:record-builder-processor:${recordBuilderVersion}"

        api "org.mapstruct:mapstruct"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructProcessorVersion}"

        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    }
}
