server:
  port: 9996
  http2:
    enabled: true
  undertow:
    buffer-size: 2048
    direct-buffers: true

jasypt:
  encryptor:
    password: ${TAOTAO_CLOUD_ENCRYPTOR_PASSWORD:taotao-cloud}
    algorithm: PBEWITHHMACSHA512ANDAES_256
#    property:
#      prefix: "ENC@["
#      suffix: "]"

seata:
  enabled: true
  application-id: ${spring.application.name}
  tx-service-group: taotao_cloud_tx_group
  enable-auto-data-source-proxy: true
  service:
    grouplist:
      default: ${TAOTAO_CLOUD_SEATA_HOST:192.168.1.10}:${TAOTAO_CLOUD_SEATA_PORT:8091}
    vgroup-mapping:
      taotao_cloud_tx_group: default
  config:
    type: nacos
    nacos:
      namespace:
      server-addr: ${TAOTAO_CLOUD_SEATA_CONFIG_NACOS_HOST:192.168.1.10}:${TAOTAO_CLOUD_SEATA_CONFIG_NACOS_PORT:8848}
      group: SEATA_GROUP
      username: ${TAOTAO_CLOUD_SEATA_CONFIG_NACOS_USERNAME:nacos}
      password: ${TAOTAO_CLOUD_SEATA_CONFIG_NACOS_PASSWORD:nacos}
  registry:
    type: nacos
    nacos:
      application: seata-server
      server-addr: ${TAOTAO_CLOUD_SEATA_REGISTRY_NACOS_HOST:192.168.1.10}:${TAOTAO_CLOUD_SEATA_REGISTRY_NACOS_PORT:8848}
      group: SEATA_GROUP
      namespace:
      username: ${TAOTAO_CLOUD_SEATA_REGISTRY_NACOS_USERNAME:nacos}
      password: ${TAOTAO_CLOUD_SEATA_REGISTRY_NACOS_PASSWORD:nacos}
      cluster: default

taotao:
  cloud:
    core:
      enabled: true
      env: dev
      logging:
        file:
          total-size: 10GB
      context:
        restart:
          enabled: false
          text:
          timespan:
      collect:
        hook:
          enabled: true
      db:
        printSql:
          enabled: true
        printSqlError:
          enabled: true
    log:
      request-log:
        enabled: true
        types:
          - logger
          - kafka
    oauth2:
      security:
        enabled: true
        ignore:
          # 忽略认证的地址
          http-urls: >
            /api-docs,
            /user/info/username,
            /user/info/id/*,
            /resource/test/seata,
            /role/info/userId,
            /resource/info/codes,
            /member/info/security,
            /user,
            /role
    swagger:
      enabled: true
      title: 用户中心
      description: 用户中心接口文档
      version: 1.0
      license: Apache
      license-url: https://opensource.org/licenses/Apache-2.0Url
      contact:
        name: dengtao
        url: http://dtbox.top/
        email: 981376577@qq.com
      base-package: com.taotao.cloud.uc.biz.controller
      host: ${spring.cloud.client.ip-address}:${server.port}
    ribbon:
      isolation:
        enabled: true
      rest-template:
        max-total: 200
        max-per-route: 50
        read-timeout: 35000
        connect-timeout: 10000
    p6spy:
      enabled: true
      dateformat: yyyy-MM-dd HH:mm:ss
      driverlist: com.mysql.cj.jdbc.Driver
      database-dialect-date-format: yyyy-MM-dd HH:mm:ss
      appender: com.taotao.cloud.p6spy.component.P6spyLogger
      log-message-format: com.taotao.cloud.p6spy.component.P6spyLogFormat
      # 使用日志系统记录sql
      #appender: com.p6spy.engine.spy.appender.Slf4JLogger
    xxl:
      job:
        enabled: true
        admin:
          addresses:
        executor:
          appname: ${spring.application.name}
          ip:
          port: 6996
          access-token: f4snMzv6qazC0kxc1A8l51rK0ksJLs
          log-path:

spring:
  main:
    allow-bean-definition-overriding: true
    banner-mode: off
  application:
    name: taotao-cloud-uc
  cloud:
    loadbalancer:
      enabled: true
  sleuth:
    enabled: true
    web:
      client:
        enabled: true
    sampler:
      #采样率，默认为0.1
      probability: 1.0
    messaging:
      enabled: false
      kafka:
        enabled: true
        mapper:
          enabled: true
        remote-service-name: ${spring.application.name}-sleuth
  zipkin:
    enabled: true
    base-url: http://${TAOTAO_CLOUD_ZIPKIN_HOST:192.168.1.10}:${TAOTAO_CLOUD_ZIPKIN_PORT:9411}
    # 关闭服务发现，否则Spring Cloud会把zipkin的url当做服务名称
    discoveryClientEnabled: false
    #发送数据类型 kafaka、rabbitmq、web
    sender:
      type: WEB
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:p6spy:mysql://${TAOTAO_CLOUD_MYSQL_HOST:192.168.1.10}:${TAOTAO_CLOUD_MYSQL_PORT:3306}/${spring.application.name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: ${TAOTAO_CLOUD_MYSQL_USERNAME:root}
    password: ${TAOTAO_CLOUD_MYSQL_PASSWORD:123456}
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    hikari:
      auto-commit: true
      connection-timeout: 30000
      idle-timeout: 25000
      login-timeout: 5
      validation-timeout: 3000
      max-lifetime: 50000
      read-only: false
      connection-test-query: SELECT 1
      maximum-pool-size: 15
      minimum-idle: 10
      pool-name: DatebookHikariCP
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
  jpa:
    database: mysql
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  redis:
    host: ${TAOTAO_CLOUD_REDIS_HOST:192.168.1.10}
    port: ${TAOTAO_CLOUD_REDIS_PORT:6379}
    database: 1
    password: ${TAOTAO-CLOUD-REDIS-PASSWORD:taotao-cloud}
    lettuce:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0
  data:
    elasticsearch:
      repositories:
        # elasticsearch 开发阶段关闭
        enabled: false
      client:
        reactive:
          endpoints:
            - ${TAOTAO_CLOUD_ELASTICSEARCH_HOST:192.168.1.10}:${TAOTAO_CLOUD_ELASTICSEARCH_PORT:9200}
          connection-timeout: 5
          username: ${TAOTAO_CLOUD_ELASTICSEARCH_USERNAME:root}
          password: ${TAOTAO_CLOUD_ELASTICSEARCH_PASSWORD:123456}
  kafka:
    bootstrap-servers: ${TAOTAO_CLOUD_KAFKA_HOST:192.168.1.10}:${TAOTAO_CLOUD_KAFKA_PORT:9092}
    producer:
      retries: 0
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
      properties:
        linger.ms: 500
    consumer:
      auto-commit-interval: 1S
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      concurrency: 5
      ack-mode: manual_immediate
      missing-topics-fatal: false
  security:
    oauth2:
      resourceserver:
        #        jwt:
        #          public-key-location: classpath:key.public
        #          jws-algorithm: RS512
        #        opaquetoken:
        #          introspection-uri: http://localhost:9000/oauth/check_token
        #          client-id: abc
        #          client-secret: abc
        jwt:
          jwk-set-uri: http://127.0.0.1:9998/oauth2/jwks
  shardingsphere:
    # shardingsphere 开发阶段关闭
    enabled: false
    datasource:
      names: mysql-master-1,mysql-slave-1,mysql-master-2,mysql-slave-2
      mysql-master-1:
        type: com.zaxxer.hikari.HikariDataSource
        jdbc-url: jdbc:mysql://${TAOTAO-CLOUD-MYSQL-HOST:192.168.99.230}:${TAOTAO-CLOUD-NACOS-PORT:3306}/taotao-cloud-uc?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false
        username: ${TAOTAO-CLOUD-MYSQL-USERNAME:root}
        password: ${TAOTAO-CLOUD-MYSQL-PASSWORD:123456}
        driver-class-name: com.mysql.jdbc.Driver
        hikari:
          connection-test-query: SELECT 1
          max-lifetime: 120000
          maximum-pool-size: 15
          minimum-idle: 3
          connection-timeout: 30000
          idle-timeout: 30000
          auto-commit: true
          pool-name: DatebookHikariCP
      mysql-slave-1:
        type: com.zaxxer.hikari.HikariDataSource
        jdbc-url: jdbc:mysql://${TAOTAO-CLOUD-MYSQL-HOST:192.168.99.230}:${TAOTAO-CLOUD-NACOS-PORT:3307}/taotao-cloud-uc?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false
        username: ${TAOTAO-CLOUD-MYSQL-USERNAME:root}
        password: ${TAOTAO-CLOUD-MYSQL-PASSWORD:123456}
        driver-class-name: com.mysql.jdbc.Driver
        hikari:
          connection-test-query: SELECT 1
          max-lifetime: 120000
          maximum-pool-size: 15
          minimum-idle: 3
          connection-timeout: 30000
          idle-timeout: 30000
          auto-commit: true
          pool-name: DatebookHikariCP
      mysql-master-2:
        type: com.zaxxer.hikari.HikariDataSource
        jdbc-url: jdbc:mysql://${TAOTAO-CLOUD-MYSQL-HOST:192.168.99.230}:${TAOTAO-CLOUD-NACOS-PORT:3308}/taotao-cloud-uc?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false
        username: ${TAOTAO-CLOUD-MYSQL-USERNAME:root}
        password: ${TAOTAO-CLOUD-MYSQL-PASSWORD:123456}
        driver-class-name: com.mysql.jdbc.Driver
        hikari:
          connection-test-query: SELECT 1
          max-lifetime: 120000
          maximum-pool-size: 15
          minimum-idle: 3
          connection-timeout: 30000
          idle-timeout: 30000
          auto-commit: true
          pool-name: DatebookHikariCP
      mysql-slave-2:
        type: com.zaxxer.hikari.HikariDataSource
        jdbc-url: jdbc:mysql://${TAOTAO-CLOUD-MYSQL-HOST:192.168.99.230}:${TAOTAO-CLOUD-NACOS-PORT:3309}/taotao-cloud-uc?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false
        username: ${TAOTAO-CLOUD-MYSQL-USERNAME:root}
        password: ${TAOTAO-CLOUD-MYSQL-PASSWORD:123456}
        driver-class-name: com.mysql.jdbc.Driver
        hikari:
          connection-test-query: SELECT 1
          max-lifetime: 120000
          maximum-pool-size: 15
          minimum-idle: 3
          connection-timeout: 30000
          idle-timeout: 30000
          auto-commit: true
          pool-name: DatebookHikariCP
    sharding:
      default-database-strategy:
        inline:
          sharding-column: id
          algorithm-expression: ds_$->{id % 2}
      #      binding-tables: sys_user,sys_dept,sys_job
      tables:
        sys_user:
          key-generator-column-name: id
          actual-data-nodes: ds_$->{0..1}.sys_user_$->{0..3}
          table-strategy:
            inline:
              sharding-column: id
              algorithm-expression: sys_user_$->{id % 4}
      master-slave-rules:
        ds_0:
          load-balance-algorithm-type: round_robin
          master-data-source-name: mysql-master-1
          slave-data-source-names: mysql-slave-1
        ds_1:
          load-balance-algorithm-type: round_robin
          master-data-source-name: mysql-master-2
          slave-data-source-names: mysql-slave-2
    props:
      sql:
        show: true

mybatis-plus:
  #  mapper-locations: classpath:/mapper/*Mapper.xml
  typeAliasesPackage: com.taotao.cloud.*.biz.entity
  global-config:
    db-config:
      id-type: auto
      table-underline: true
      field-strategy: NOT_NULL
      logic-delete-value: 1
      logic-not-delete-value: 0
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

feign:
  sentinel:
    enabled: true
  okhttp:
    enabled: true
  httpclient:
    enabled: false
    max-connections: 1000
    max-connections-per-route: 100
  client:
    config:
      feignName:
        connectTimeout: 30000
        readTimeout: 30000
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
    health:
      show-details: ALWAYS
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
  health:
    elasticsearch:
      enabled: false

logging:
  level:
    root: INFO
    org.springframework.web: off
    org.springframework.security: off
    org.springframework.security.oauth2: off
    org.springframework.boot.autoconfigure: off
