/*
 * Copyright (c) 2020-2030, Shuigedeng (981376577@qq.com & https://blog.taotaocloud.top/).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pluginManagement {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jetbrains.bintray.com/intellij-plugin-service' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url 'https://repo.spring.io/plugins-release' }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

rootProject.name = 'taotao-cloud-project'

def oneLayerProjects = ['dependencies', 'scala', 'netty', 'node', 'plugin', 'python', 'ui', 'go','demo']
for (project in oneLayerProjects) {
    include "taotao-cloud-${project}"
}

def twoLayerProjects = ['bigdata', 'java', 'rpc', 'standalone', 'container', 'offline', 'reactive', 'spring']
for (project in twoLayerProjects) {
    def dir = "taotao-cloud-${project}"
    file("${rootDir}/${dir}").eachDir { directory ->
        directory.eachDir {
            if (it.name != "build" && it.name != "out") {
                include "${dir}:${directory.name}"
            }
        }
    }
}

def threeLayerProjects = ['microservice', 'realtime']
for (project in threeLayerProjects) {
    def dir = "taotao-cloud-${project}"
    file("${rootDir}/${dir}").eachDir { directory ->
        if (directory.name != "build" && directory.name != "out" && directory.name != "src") {
            include "${dir}:${directory.name}"
            directory.eachDir {it->
                if (it.name != "build" && it.name != "src" && it.name != "out") {
                    include "${dir}:${directory.name}:${it.name}"

                    it.eachDir {four->
                        if (four.name != "build" && four.name != "src" && four.name != "out") {
                            include "${dir}:${directory.name}:${it.name}:${four.name}"
                        }
                    }
                }
            }
        }
    }
}
