/*
 * Copyright (c) 2020-2030, Shuigedeng (981376577@qq.com & https://blog.taotaocloud.top/).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pluginManagement {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://repo.spring.io/release' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jetbrains.bintray.com/intellij-plugin-service' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url 'https://repo.spring.io/plugins-release' }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

plugins {
    //https://plugins.gradle.org/plugin/com.gradle.enterprise
    id "com.gradle.enterprise" version "3.15.1"

    //id "com.gradle.enterprise" version "3.14.1"
}

import com.gradle.scan.plugin.PublishedBuildScan

gradleEnterprise {
    server = "https://gradle-enterprise.mycompany.com"
    accessKey = "7w5kbqqjea4vonghohvuyra5bnvszop4asbqee3m3sm6dbjdudtq"

    buildScan {
        publishAlways()
        publishAlwaysIf(true)

        uploadInBackground = false

        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"

        tag System.getProperty("os.name")
        link "VCS", "https://github.com/myorg/sample/tree/${System.getProperty("vcs.branch")}"
        //value "Build Number", project.version

        capture {
            taskInputFiles = true

            buildLogging = true
            testLogging = true
        }

        //buildFinished { BuildResult result ->
        //    if (result.failure) {
        //        value "Failed with", result.failure.message
        //    }

        //    value "Disk usage (output dir)", buildDir.directorySize().toString()
        //}

        buildScanPublished { PublishedBuildScan scan ->
            file("scan-journal.log") << "${new Date()} - ${scan.buildScanId} - ${scan.buildScanUri}\n"
        }

        background {
            def commitId = "git rev-parse --verify HEAD".execute().text.trim()
            value "Git Commit ID", commitId
        }

        obfuscation {
            hostname { host -> host.collect { character -> Character.getNumericValue(character as char) }.join("-") }
            username { name -> name.reverse() }
            ipAddresses { addresses -> addresses.collect { address -> "0.0.0.0" } }
        }
    }
}

rootProject.name = 'taotao-cloud-project'

def oneLayerProjects = ['scala', 'netty', 'python', 'demo', 'node', 'go']
for (project in oneLayerProjects) {
    include "taotao-cloud-${project}"
}

def twoLayerProjects = ['bigdata', 'plugin']
for (project in twoLayerProjects) {
    def dir = "taotao-cloud-${project}"
    file("${rootDir}/${dir}").eachDir { directory ->
        directory.eachDir { it ->
            if (it.name != "build" && it.name != "out" && it.name != "bin" && it.name != "arthas-output") {
                include "${dir}:${directory.name}"
            }
        }
    }
}

def threeLayerProjects = ['microservice', 'warehouse', 'custom']
for (project in threeLayerProjects) {
    def dir = "taotao-cloud-${project}"
    file("${rootDir}/${dir}").eachDir { directory ->
        if (directory.name != "build" && directory.name != "out" && directory.name != "src" && directory.name != "bin" && directory.name != "arthas-output") {
            include "${dir}:${directory.name}"

            directory.eachDir { it ->
                if (it.name != "build" && it.name != "src" && it.name != "out" && it.name != "bin" && it.name != "arthas-output") {
                    include "${dir}:${directory.name}:${it.name}"

                    it.eachDir { four ->
                        if (four.name != "build" && four.name != "src" && four.name != "out" && four.name != "bin" && four.name != "arthas-output") {
                            include "${dir}:${directory.name}:${it.name}:${four.name}"
                        }
                    }
                }
            }
        }
    }
}

gradle.settingsEvaluated {
    if (JavaVersion.current() < JavaVersion.VERSION_21) {
        throw new GradleException("This build requires JDK 21. It's currently ${JavaVersion.current()}. You can ignore this check by passing '-Dorg.gradle.ignoreBuildJavaVersionCheck'.")
    }
}
