<beans 	xmlns="http://www.springframework.org/schema/beans"
          xmlns:context="http://www.springframework.org/schema/context"
          xmlns:mvc="http://www.springframework.org/schema/mvc"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context.xsd
							http://www.springframework.org/schema/mvc
							http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 注解扫描 -->
    <context:component-scan base-package="com.qf.web"/>

    <!-- 注解驱动 -->
    <mvc:annotation-driven>
        <!-- 安装FastJson,转换器 -->
        <mvc:message-converters>
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <!-- 声明转换类型:json -->
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 视图解析器
	     作用：1.捕获后端控制器的返回值="hello"
	          2.解析： 在返回值的前后 拼接 ==> "/hello.jsp"
	 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 前缀 -->
        <property name="prefix" value="/"></property>
        <!-- 后缀 -->
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!--
       额外的增加一个handler，且其requestMapping:  "/**" 可以匹配所有请求，但是优先级最低
      所以如果其他所有的handler都匹配不上，请求会转向 "/**" ,恰好，这个handler就是处理静态资源的
      处理方式：将请求转会到tomcat中名为default的Servlet

      RequestMapping  /*   /a   /b  /c   /dxxxx    /a/b
                      /**
     -->
    <mvc:default-servlet-handler/>

    <!--<mvc:resources mapping="/html/**" location="/page/"/>
    <mvc:resources mapping="/css/**" location="/css/"/>-->

    <!-- 异常解析器 -->
    <bean class="com.qf.resolver.MyExceptionResolver"></bean>

    <!-- 拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!--<mvc:mapping path="/inter/test1"/>
            <mvc:mapping path="/inter/test2"/>-->
            <mvc:mapping path="/inter/**"/>  <!-- /inter/a/test1   /inter/b/test2 -->
            <mvc:exclude-mapping path="/inter/login"/>
            <bean class="com.qf.interceptor.MyInterceptor"/>
        </mvc:interceptor>

        <mvc:interceptor>
            <mvc:mapping path="/upload/test1"/>
            <bean class="com.qf.interceptor.MyFileUploadInterceptor">
                <property name="maxFileuploadSize" value="1048576"/>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 上传解析器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 最大可上传的文件大小  单位：byte  超出后会抛出MaxUploadSizeExceededException异常，可以异常解析器捕获 -->
        <!--<property name="maxUploadSize" value="1048576"></property>-->
    </bean>
</beans>