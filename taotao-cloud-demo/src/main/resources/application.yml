server:
  port: 33337
  http2:
    enabled: false
  undertow:
    buffer-size: 2048
    direct-buffers: true
    threads:
      io: 16
      worker: 256
    accesslog:
      dir: ${user.home}/logs/undertow
      enabled: true
  servlet:
    application-display-name: ${spring.application.name}

#oss:
#  minio:
#    enable: true
#    endpoint: https://111111.1000fun.com
#    access-key: admin
#    secret-key: adminminio
#    bucket-name: annexpic
#    base-path: /test

logging:
  level:
    root: INFO
    org.springframework.web: off
    org.apache.zookeeper: debug
    org.springframework.security: off
    org.springframework.security.oauth2: off
    org.springframework.boot.autoconfigure: off
    org.springframework.cloud.openfeign: off
redisson:
  password: ${TAOTAO_CLOUD_REDIS_PASSWORD:taotao-cloud}
  single-server-config:
    address: ${TAOTAO_CLOUD_REDIS_HOST:192.168.10.200}:${TAOTAO_CLOUD_REDIS_PORT:6379}
spring:
  redis:
    #host: ${TAOTAO_CLOUD_REDIS_HOST:192.168.10.200}
    #port: ${TAOTAO_CLOUD_REDIS_PORT:6379}
    #database: 1
    #password: ${TAOTAO_CLOUD_REDIS_PASSWORD:taotao-cloud}
    connect-timeout: 60000
    cluster:
      nodes: 192.168.10.200:7100,192.168.10.200:7101,192.168.10.200:7102,192.168.10.200:7103,192.168.10.200:7104,192.168.10.200:7105
      max-redirects: 3
    #sentinel:
    #  master:
    #  nodes:
    client-type: lettuce
    lettuce:
      pool:
        max-active: 1500
        max-wait: 5000
        max-idle: 500
        min-idle: 100
#    redisson:
#      config: |
#        clusterServersConfig:
#          idleConnectionTimeout: 10000
#          connectTimeout: 10000
#          timeout: 3000
#          retryAttempts: 3
#          retryInterval: 1500
#          failedSlaveReconnectionInterval: 3000
#          failedSlaveCheckInterval: 60000
#          password: null
#          subscriptionsPerConnection: 5
#          clientName: null
#          loadBalancer: !<org.redisson.connection.balancer.RoundRobinLoadBalancer> {}
#          subscriptionConnectionMinimumIdleSize: 1
#          subscriptionConnectionPoolSize: 50
#          slaveConnectionMinimumIdleSize: 24
#          slaveConnectionPoolSize: 64
#          masterConnectionMinimumIdleSize: 24
#          masterConnectionPoolSize: 64
#          readMode: "SLAVE"
#          subscriptionMode: "SLAVE"
#          nodeAddresses:
#          - "redis://192.168.10.200:7100"
#          - "redis://192.168.10.200:7101"
#          - "redis://192.168.10.200:7102"
#          - "redis://192.168.10.200:7103"
#          - "redis://192.168.10.200:7104"
#          - "redis://192.168.10.200:7105"
#          scanInterval: 1000
#          pingConnectionInterval: 0
#          keepAlive: false
#          tcpNoDelay: false
#        threads: 16
#        nettyThreads: 32
#        codec: !<org.redisson.codec.MarshallingCodec> {}
#        transportMode: "NIO"

  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mysql://1111111111:63308/wushan-data-share-db?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai
    username: wushan
    password: wushan@weifuwu2021
    driver-class-name: com.mysql.cj.jdbc.Driver
    #driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    hikari:
      # 从池返回的连接的默认自动提交行为 默认true
      auto-commit: true
      # 客户端等待连接池的最大毫秒数
      connection-timeout: 350000
      # 允许连接在连接池中空闲的最大时间（毫秒）
      idle-timeout: 180000
      login-timeout: 5
      # 连接测试活动的最大时间量
      validation-timeout: 3000
      # 池中关闭连接后的最长生命周期
      max-lifetime: 1800000
      read-only: false
      connection-test-query: SELECT 1
      maximum-pool-size: 200
      minimum-idle: 10
      pool-name: DatebookHikariCP
      register-mbeans: true
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
  lifecycle:
    timeout-per-shutdown-phase: 30s
  thymeleaf:
    mode: HTML5
    prefix: classpath:/static/
    suffix: .html
    encoding: UTF-8
    cache: false
    enabled: true
  main:
    allow-circular-references: false
    allow-bean-definition-overriding: true
    banner-mode: off
    register-shutdown-hook: true
    cloud-platform: kubernetes
    web-application-type: servlet
  application:
    name: taotao-cloud-demo
    admin:
      enabled: true
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
  web:
    resources:
      # pro环境关闭
      add-mappings: true
  mvc:
    servlet:
      load-on-startup: 1
    format:
      date-time: yyyy-MM-dd HH:mm:ss
      date: yyyy-MM-dd
    dispatch-trace-request: true
    dispatch-options-request: true
    log-request-details: true
    log-resolved-exception: true
  servlet:
    multipart:
      enabled: true
      file-size-threshold: 2KB
      max-file-size: 200MB
      max-request-size: 215MB

taotao:
  cloud:
    netty:
      socket:
        enabled: false
    rxjava:
      enabled: false
    disruptor:
      enabled: false
      multi-producer: false
      ring-buffer-size: 1024
      ring-thread-numbers: 4
      #handler-definitions:
      # - /Event-DC-Output/TagA-Output/** = emailHandler
      # - /Event-DC-Output/TagB-Output/** = smsHandler
    dinger:
      enabled: false
      project-id: ${spring.application.name}
      dingers:
        dingtalk:
          tokenId: ${DINGDING_TOKEN_ID:xxxxx}
          secret: ${DINGDING_SECRET:xxxx}
      httpclient:
        enabled: true
      threadpool:
        enabled: true
    canal:
      enabled: false
      instances:
        example:
          clusterEnabled: false
          zookeeperAddress: 192.168.10.200:2181
          host: 192.168.10.200
          port: 11111
          userName: canal
          password: 123456
          batchSize: 1000
          filter:
          retryCount: 3
          acquireInterval: 3000
    zookeeper:
      enabled: false
      connectString: 192.168.10.200:2181
      lock:
        enabled: true

#Apollo 配置
app:
  id: taotao-cloud-demo                          #应用ID
#apollo:
#  cacheDir: ${user.dir}/logs/apolloconfig/                       #配置本地配置缓存目录
#  cluster: default                           #指定使用哪个集群的配置
#  meta: http://192.168.10.200:8080            #DEV环境配置中心地址
#  autoUpdateInjectedSpringProperties: true   #是否开启 Spring 参数自动更新
#  bootstrap:
#    enabled: true                            #是否开启 Apollo
#    namespaces: application                  #设置 Namespace
#    eagerLoad:
#      enabled: false                         #将 Apollo 加载提到初始化日志系统之前
