buildscript {
    ext {
        taotaoCloudVersion = taotaoCloudVersion
        taotaoCloudGroup = "com.taotao.cloud"

        springVersion = '5.3.4'
        springBootVersion = '2.5.1'
        springCloudVersion = '2020.0.3'
        springCloudAlibabaVersion = '2021.1'

        springSecurityVersion = '5.4.5'
        springDataCommonsVersion = '2.4.5'
        springKafkaVersion = '2.6.5'

        fasterxmlVersion = '2.11.3'
        transmittableVersion = '2.12.1'
        slf4jVersion = '1.7.30'
        easypoiVersion = '4.3.0'
        aspectjweaverVersion = '1.9.6'
        reactorVersion = '3.4.3'
        servletApiVersion = '4.0.1'
        bannerVersion = "1.0.2"
        lombokVersion = '1.18.18'
        javassistVersion = '3.27.0-GA'
        easyCaptchaVersion = '1.6.2'
        hutoolVersion = '5.5.9'
        validationApiVersion = '2.0.1.Final'
        querydslVersion = '4.4.0'
        p6spyVersion = '3.9.1'
        mysqlVersion = '8.0.20'
        mybatisPlusStarterVersion = '3.4.2'
        upyunJavaSdkVersion = '4.2.1'
        aliyunSdkOssVersion = '3.11.3'
        qiniuJavaSdkVersion = '7.4.0'
        gsonVersion = '2.8.6'
        guavaVersion = '29.0-jre'
        okhttpVersion = '4.9.0'
        okioVersion = '2.10.0'
        fastdfsClientVersion = '1.27.2'
        commonsNetVersion = '3.7.2'
        feignOkhttpVersion = '11.0'
        httpcomponentsVersion = '4.5.12'
        logbackKafkaAppenderVersion = '0.2.0-RC2'
        logstashLogbackEncoderVersion = '6.6'
        commonsVersion = '3.11'
        commonsIoVersion = '2.6'
        commonsCollectionsVersion = '3.2.2'
        commonsCollections4Version = '4.4'
        lettuceVersion = '6.0.2.RELEASE'
        redissonVersion = "3.15.0"
        seataVersion = "1.4.1"
        shardingsphereVersion = "4.1.1"

        swaggerVersion = '3.0.0'
        swaggerUiVersion = '1.8.7'
        swaggerModelsVersion = '1.6.2'
        swaggerButlerVersion = '2.0.1'
        swaggerBootstrapUiVersion = '1.9.6'
        knife4jVersion = '3.0.2'

        qcloudsmsVersion = '1.0.6'
        userAgentUtilsVersion = '1.21'
        xxlJobVersion = '2.2.0'
        mapstructVersion = "1.4.1.Final"
    }

    repositories {
        mavenLocal()
        maven {
            allowInsecureProtocol = true
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }

        maven {
            allowInsecureProtocol = true

            credentials {
                username = System.getenv("TAOTAO_CLOUD_MAVEN_USERNAME")
                password = System.getenv("TAOTAO_CLOUD_MAVEN_PASSWORD")
            }
            url 'https://repo.rdc.aliyun.com/repository/136936-release-reey0l/'
        }

        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        gradlePluginPortal()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:2.8.0"
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id "com.google.cloud.tools.jib" version "2.8.0"
    id "com.github.johnrengelman.shadow" version "6.1.0"
//    id "org.jetbrains.intellij" version "0.6.5"
    id "com.github.johnrengelman.processes" version "0.5.0"
    id "org.springdoc.openapi-gradle-plugin" version "1.3.0"
}

allprojects {
    version project.taotaoCloudVersion
    group project.taotaoCloudGroup

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    repositories {
        mavenLocal()

        maven {
            allowInsecureProtocol = true
            url 'https://maven.aliyun.com/repository/public'
        }

        maven {
            allowInsecureProtocol = true

            credentials {
                username = System.getenv("TAOTAO_CLOUD_MAVEN_USERNAME")
                password = System.getenv("TAOTAO_CLOUD_MAVEN_PASSWORD")
            }
            url 'https://repo.rdc.aliyun.com/repository/136936-release-reey0l/'
        }

        maven {
            allowInsecureProtocol = true

            credentials {
                username = System.getenv("TAOTAO_CLOUD_MAVEN_USERNAME")
                password = System.getenv("TAOTAO_CLOUD_MAVEN_PASSWORD")
            }
            url 'https://repo.rdc.aliyun.com/repository/136936-snapshot-hglDf2/'
        }

        mavenCentral()
    }
}

configure(subprojects.findAll { (it.name != "taotao-cloud-dependencies") }) { project ->
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'
    apply plugin: 'org.springframework.boot'
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "com.google.cloud.tools.jib"

//    apply plugin: "com.taotao.cloud.plugin"

    dependencies {
        implementation platform("com.taotao.cloud:taotao-cloud-dependencies:$taotaoCloudVersion")
    }

    task createProperties(dependsOn: processResources) {
        doLast {
            def fileDir = new File("$buildDir/resources/main");
            if (fileDir.exists() && fileDir.isDirectory()) {
                new File("$buildDir/resources/main/application.properties").withWriter { w ->
                    def projectProperties = project.properties

                    Properties p = new Properties()
                    projectProperties.each { entry ->
                        p[entry.key.toString()] = entry.value.toString()
                    }

                    p.store w, null
                }
            }
        }
    }

    classes {
        dependsOn createProperties
    }

    checkstyle {
        project.ext.checkstyleVersion = '8.14'
        // The version of the code quality tool to be used.
        // The most recent version of Checkstyle can be found at https://github.com/checkstyle/checkstyle/releases
        toolVersion = "8.14"
        configFile = file("${rootDir}/checkstyle/google_checks.xml")
//        configFile = rootProject.file('quality/google_checks.xml')

        // The source sets to be analyzed as part of the check and build tasks.
        // Use 'sourceSets = []' to remove Checkstyle from the check and build tasks.
        // sourceSets = [project.sourceSets.main, project.sourceSets.test]

        // Whether or not to allow the build to continue if there are warnings.
        ignoreFailures = false

        // Whether or not rule violations are to be displayed on the console.
        showViolations = true
    }

    publishing {
        repositories {
            maven {
                allowInsecureProtocol = true
                credentials {
                    username = System.getenv("TAOTAO_CLOUD_MAVEN_USERNAME")
                    password = System.getenv("TAOTAO_CLOUD_MAVEN_PASSWORD")
                }
                url 'https://repo.rdc.aliyun.com/repository/136936-release-reey0l/'
            }

            maven {
                allowInsecureProtocol = true
                credentials {
                    username = System.getenv("TAOTAO_CLOUD_MAVEN_USERNAME")
                    password = System.getenv("TAOTAO_CLOUD_MAVEN_PASSWORD")
                }
                url 'https://repo.rdc.aliyun.com/repository/136936-snapshot-hglDf2/'
            }
        }

        publications {
            mavenJava(MavenPublication) {
                //artifact bootJar
                groupId rootProject.group
                artifactId project.name
                version rootProject.version

                //打包类型 war: components.web jar: components.java
                from components.java

                pom {
                    name = 'taotao cloud library'
                    description = 'a concise description of taotao cloud library'
                    url = 'https://github.com/shuigedeng/taotao-cloud-project.git'
//                    properties = [
//                            "taotao": "anotherValue",
//                            "prop.with.dots": "anotherValue",
//                    ]
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'tiga'
                            name = 'tiga'
                            email = '981376577@qq.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:shuigedeng/taotao-cloud-project.git'
                        developerConnection = 'scm:git:ssh://git@github.com:shuigedeng/taotao-cloud-project.git'
                        url = 'https://github.com/shuigedeng/taotao-cloud-project.git'
                    }
                }
            }
        }
    }

    jib {
        from {
//            image = 'registry.cn-hangzhou.aliyuncs.com/taotao-cloud-decenter/taotao-cloud:openjdk8-jdk-alpine'
//            auth {
//                username System.getenv("TAOTAO_CLOUD_REGISTRY_USERNAME")
//                password System.getenv("TAOTAO_CLOUD_REGISTRY_PASSWORD")
//            }
        }
        to {
            image = 'registry.cn-hangzhou.aliyuncs.com/taotao-cloud-decenter/taotao-cloud'
            tags = ["${project.name}".toString(), "${project.version}".toString()]
//            auth {
//                username System.getenv("TAOTAO_CLOUD_REGISTRY_USERNAME")
//                password System.getenv("TAOTAO_CLOUD_REGISTRY_PASSWORD")
//            }
        }
        container {
            creationTime = 'USE_CURRENT_TIMESTAMP'
            jvmFlags = ['-Djava.security.egd=file:/dev/./urandom', '-Dspring.profiles.active=dev', '-Dfile.encoding=utf-8', '-Duser.timezone=Asia/Shanghai']
            mainClass = 'com.taotao.cloud.dubbo.account.provider.AccountServiceApplication'
            args = ['some', 'args']
            ports = ['8010']
            labels = [key1: 'value1', key2: 'value2']
        }
    }
}

//task printlnDefaultTask {
//    println  project.properties
//}

//configurations.all{
//    resolutionStrategy{
//        //修改gradle不自动处理版本冲突
//        // failOnVersionConflict()
//
//        //手动指定某个jar版本
//        //force 'org.slf4j:slf4j-api:1.7.24'
//    }
//}
//
// gradle生命周期中的钩子方法
//gradle.projectsEvaluated {
//    System.setProperty("version", project.version)
//    System.setProperty("gradleVersion", gradle.gradleVersion)
//
//    project.setProperty("version", project.version)
//}
//
//System.setProperty("version", project.version)
//System.setProperty("gradleVersion", gradle.gradleVersion)
//
//project.setProperty("version", project.version)

//gradle.afterProject {
//    System.setProperty("version", project.version)
//    System.setProperty("gradleVersion", gradle.gradleVersion)
//
//    project.setProperty("version", project.version)
//}p6spyVersion

////任务图
//gradle.taskGraph.whenReady {
//    println 'config phase: taskGraph.whenReady'
//}
//
//gradle.taskGraph.beforeTask{
//    println 'execute phase: taskGraph.beforeTask'
//}
//
//gradle.taskGraph.afterTask {
//    println "execute phase: taskGraph.afterTask"
//}
//
//gradle.buildFinished {
//    println 'execute phase: buildFinished'
//}
